{"mappings":"AAEA,MASMA,EAAmB,KACxB,GAAgC,YAA5BC,aAAaC,WAA0B,CAC1C,MAAMC,EAAe,IAAIF,aAAa,aAAc,CACnDG,KAAM,mCAGPC,SAASC,iBAAiB,oBAAoB,KACZ,YAA7BD,SAASE,iBACZJ,EAAaK,OAAO,G,GCnBlBC,EAAyB,CAC9BC,iBAAkB,CACjBC,SAAU,KACVC,WAAY,IACZC,UAAW,KAEZC,kBAAmB,WACnBC,KAAM,aACNC,YAAa,aAYRC,EAAuBC,IAC5BC,OAAOC,aAAaC,QAAQ,kBAAmBC,KAAKC,UAAUL,GAAiB,EClB1EM,EAASnB,SAASoB,cAAc,mBAChCC,EAAcF,EAAOC,cAAc,uBACnCE,EAAetB,SAASuB,eAAe,iBACvCC,EAAsBxB,SAASuB,eAAe,yBAC9CE,EAAgBzB,SAASoB,cAAc,0BAEvCM,EAAkB1B,SAAS2B,iBAAiB,4BAE5CC,EAAiB5B,SAASuB,eAAe,0BACzCM,EAAiB7B,SAASuB,eAAe,mBACzCO,EAAeD,EAAeT,cAAc,QAC5CW,EAAoB/B,SAASuB,eAAe,gBAE5CS,EAAkB,IAAIC,IAAI,CAC/B,CAAC,WAAY,YACb,CAAC,cAAe,cAChB,CAAC,aAAc,eAOVC,EDOqB,MAC1B,MAAMrB,EAAkBC,OAAOC,aAAaoB,QAAQ,mBAEpD,OAAOtB,EAAkBI,KAAKmB,MAAMvB,GAAmBT,CAAsB,ECVtD,GAExB,IAAIiC,GAAgB,EAGpB,IAAIX,GAAiBY,MAAMC,GAAYP,EAAgBQ,IAAID,EAAQE,SAAWP,EAAgBzB,oBAAmBiC,SAAU,EAE3H,IAAIC,EAAgBT,EAAgB7B,iBAAiB6B,EAAgBzB,mBAEjEmC,EAA4B,KAShC,MAAMC,EAAyB,KAC9BvB,EAAawB,EAAEC,QAAQN,MAA+C,GAAvCtB,EAAO6B,wBAAwBC,MAC9DzB,EAAoBsB,EAAEC,QAAQN,MAA+C,IAAvCtB,EAAO6B,wBAAwBC,MAErE,MAAMC,EAAqB5B,EAAawB,EAAEC,QAAQN,MAClDG,EAAiD,EAArBM,EAAyBC,KAAKC,GAE1D9B,EAAa+B,MAAMC,gBAAkB,GAAGV,KAA6BA,IACrEtB,EAAa+B,MAAME,iBAAmB,GAAGX,IAEzCtB,EAAa+B,MAAME,iBAAmB,CAAC,EAUlCC,EAAsBC,IACO,OAA9Bb,GACHC,IAGD,MAAMa,EAASd,EAA4Ba,EAAU,IAAMb,EAC3DtB,EAAa+B,MAAME,iBAAmBG,CAAM,EAY7C,SAASC,EAAqBC,GAC7B,IAAIC,EAAUC,SAASF,EAAgB,GAAI,IAAIG,WAAWC,SAAS,EAAG,KAClEC,EAAUH,SAASF,EAAgB,GAAI,IAAIG,WAAWC,SAAS,EAAG,KAEtEvC,EAAcyC,kBAAkBC,UAAYN,EAC5CpC,EAAc2C,iBAAiBD,UAAYF,C,CAG5C,IAAII,EACAC,EASJ,MAAMC,EAAc,KACnBf,EAAmBb,EAAgBT,EAAgB7B,iBAAiB6B,EAAgBzB,mBAAqB,KACzGkD,EAAoBhB,GACpBA,GAAe,EAUV6B,EAAa,KAClBnC,GAAgB,EAChBhB,EAAY8C,UAAY,QACxBI,IAEAF,EAAaI,aAAY,KACxBF,GAAa,GACX,KAEHD,EAAYI,YAAW,KACvBC,IACAhF,GAAkB,GACuD,IAAtEuC,EAAgB7B,iBAAiB6B,EAAgBzB,mBAA0B,EAwBzEkE,EAAa,KAClBtD,EAAY8C,UAAY,QACxBS,cAAcP,GACdQ,aAAaP,GACb3B,EAAgBT,EAAgB7B,iBAAiB6B,EAAgBzB,mBACjE+C,EAAmB,KACnBG,EAAoBhB,EAAc,EAsB7BmC,EAAqB,MACrBzC,GAAiBM,EAAgB,EACrC6B,IACWnC,GAAmC,IAAlBM,GA5C7BN,GAAgB,EAChBhB,EAAY8C,UAAY,SACxBS,cAAcP,GACdQ,aAAaP,KA2BbK,IACAH,IAgBa,EAuGbrD,EAAOlB,iBAAiB,SAAS,WAChC6E,G,IAGDpD,EAAgBqD,SAASC,GAAUA,EAAM/E,iBAAiB,UAAU,SAASgF,GAtBpD,GAAGC,QAAQzC,MAAEA,OACjCT,EAAgBmD,IAAI1C,KAIzBP,EAAgBzB,kBAAoBuB,EAAgBQ,IAAIC,GACxD7B,EAAoBsB,GACpByC,IAAY,EAgBXS,CAAkBH,E,MAGnBrD,EAAe3B,iBAAiB,SAAS,WACxC4B,EAAewD,W,IAGhBtD,EAAkB9B,iBAAiB,SAAS,WAC3C4B,EAAe1B,O,IAGhB2B,EAAa7B,iBAAiB,UAAU,SAASgF,GA9DrB,CAACK,IAC7B,MAAMhF,SAAEA,EAAQC,WAAEA,EAAUC,UAAEA,EAASE,KAAEA,EAAIC,YAAEA,GA3CxB,CAAC4E,IACxB,MAAM7E,EAAO,IAAI6E,EAAK5D,iBAAiB,qCACrCW,MAAM0C,GAAUA,EAAMtC,UACtBD,MAEI9B,EAAc,IAAI4E,EAAK5D,iBAAiB,6CAC5CW,MAAM0C,GAAUA,EAAMtC,UACtBD,MAUF,MARiB,CAChBnC,SAAUiF,EAAKnE,cAAc,wBAAwBqB,MACrDlC,WAAYgF,EAAKnE,cAAc,+BAA+BqB,MAC9DjC,UAAW+E,EAAKnE,cAAc,8BAA8BqB,M,KAC5D/B,EACAC,YAAa,SAASA,IAGR,EA0BgD6E,CAAgBF,EAAMJ,QAErFhD,EAAgB7B,iBAAmB,CAClCC,SAAqB,GAAXA,EACVC,WAAyB,GAAbA,EACZC,UAAuB,GAAZA,GAEZ0B,EAAgBxB,KAAOA,EACvBwB,EAAgBvB,YAAcA,EAE9BC,EAAoBsB,GAEpBlC,SAASoB,cAAc,SAASiC,MAAMoC,YAAY,SAAUvD,EAAgBxB,MAC5EV,SAASoB,cAAc,SAASiC,MAAMoC,YAAY,eAAgB,OAAOvD,EAAgBvB,gBAEzFgE,GAAY,EA+CXe,CAAqBT,E,IAGtBpC,IACAc,EAAoBhB,GAlFU,MAC9B,MAAMrC,SAAEA,EAAQC,WAAEA,EAAUC,UAAEA,GAAc0B,EAAgB7B,iBAE5DL,SAASuB,eAAe,uBAAuBkB,MAAQnC,EAAW,GAClEN,SAASuB,eAAe,8BAA8BkB,MAAQlC,EAAa,GAC3EP,SAASuB,eAAe,6BAA6BkB,MAAQjC,EAAY,EAAE,EA8E3EmF,GFjTgC,YAA5B/F,aAAaC,YAChBD,aAAagG,oBACXC,MAAMC,IACNC,QAAQC,IAAIF,EAAO","sources":["src/lib/notifications.js","src/lib/userPreferences.js","src/app.js"],"sourcesContent":["let areNotificationsGranter = false;\n\nconst requestNotificationPermission = () => {\n\tif (Notification.permission === \"default\") {\n\t\tNotification.requestPermission()\n\t\t\t.then((result) => {\n\t\t\t\tconsole.log(result);\n\t\t\t});\n\t}\n};\n\nconst notifyTimerEnded = () => {\n\tif (Notification.permission === \"granted\") {\n\t\tconst notification = new Notification(\"Time's up!\", {\n\t\t\tbody: 'Your pomodoro timer has ended.',\n\t\t});\n\n\t\tdocument.addEventListener('visibilitychange', () => {\n\t\t\tif (document.visibilityState === 'visible') {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t})\n\t}\n};\n\nexport {\n\trequestNotificationPermission,\n\tnotifyTimerEnded,\n}\n","const defaultUserPreferences = {\n\tdefaultTimerTime: {\n\t\tpomodoro: 1200,\n\t\tshortBreak: 300,\n\t\tlongBreak: 600,\n\t},\n\tselectedTimerType: 'pomodoro',\n\tfont: 'Kumbh Sans',\n\taccentColor: '--clr-red',\n};\n\n/**\n * @function\n * @name setUserPreferences\n * @description Saves the user preferences in local storage.\n *\n * @author Tam\n *\n * @param {object} userPreferences The user preferences to save.\n */\nconst saveUserPreferences = (userPreferences) => {\n\twindow.localStorage.setItem('userPreferences', JSON.stringify(userPreferences));\n}\n\n/**\n * @function\n * @name getUserPreferences\n * @description Returns the user preferences from the local storage or a default value if none is found.\n *\n * @author Tam\n *\n * @return {object} The user preferences.\n */\nconst getUserPreferences = () => {\n\tconst userPreferences = window.localStorage.getItem('userPreferences');\n\n\treturn userPreferences ? JSON.parse(userPreferences) : defaultUserPreferences;\n}\n\nexport {\n\tsaveUserPreferences,\n\tgetUserPreferences,\n};\n","import { notifyTimerEnded, requestNotificationPermission } from './lib/notifications.js';\nimport { getUserPreferences, saveUserPreferences } from './lib/userPreferences.js';\n\nconst button = document.querySelector('#timer > button');\nconst buttonLabel = button.querySelector(\"#timer-button-label\");\nconst progressRing = document.getElementById('progress-ring');\nconst progressRingWrapper = document.getElementById('progress-ring-wrapper');\nconst timeIndicator = document.querySelector('#timer > button > time');\n\nconst timerTypeInputs = document.querySelectorAll('input[name=\"timer-type\"]');\n\nconst settingsButton = document.getElementById('settings-dialog-toggle');\nconst settingsDialog = document.getElementById('settings-dialog');\nconst settingsForm = settingsDialog.querySelector('form');\nconst closeDialogButton = document.getElementById('close-dialog');\n\nconst timerTypeValues = new Map([\n\t['pomodoro', 'pomodoro'],\n\t['short-break', 'shortBreak'],\n\t['long-break', 'longBreak'],\n]);\n\n/**\n * @var\n * @name userPreferences\n */\nconst userPreferences = getUserPreferences();\n\nlet isTimerActive = false;\n\n// Checks the timer type radio button linked to the selected timer type.\n[...timerTypeInputs].find((element) => timerTypeValues.get(element.value) === userPreferences.selectedTimerType).checked = true;\n\nlet remainingTime = userPreferences.defaultTimerTime[userPreferences.selectedTimerType];\n\nlet progressRingCircumference = null;\n\n/**\n * @function\n * @name initialiseProgressRing\n * @description Initialises the progress ring.\n *\n * @author Tam\n */\nconst initialiseProgressRing = () => {\n\tprogressRing.r.baseVal.value = button.getBoundingClientRect().width * 0.40;\n\tprogressRingWrapper.r.baseVal.value = button.getBoundingClientRect().width * 0.42;\n\t\n\tconst progressRingRadius = progressRing.r.baseVal.value;\n\tprogressRingCircumference = progressRingRadius * 2 * Math.PI;\n\t\n\tprogressRing.style.strokeDasharray = `${progressRingCircumference} ${progressRingCircumference}`;\n\tprogressRing.style.strokeDashoffset = `${progressRingCircumference}`;\n\n\tprogressRing.style.strokeDashoffset = 0;\n}\n\n/**\n * @function\n * @name updateProgressRing\n * @description Updates the progress ring with the given percentage.\n *\n * @param {number} percent The progress percentage.\n */\nconst updateProgressRing = (percent) => {\n\tif (progressRingCircumference === null) {\n\t\tinitialiseProgressRing();\n\t}\n\n\tconst offset = progressRingCircumference - percent / 100 * progressRingCircumference;\n\tprogressRing.style.strokeDashoffset = offset;\n}\n\n/**\n * @function\n * @name updateTimeIndicator\n * @description Updates the time indicator with the remaining time, formatted in MM:SS.\n *\n * @author Tam\n *\n * @param {number} remainingTime The remaining time in seconds.\n */\nfunction updateTimeIndicator (remainingTime) {\n\tlet minutes = parseInt(remainingTime / 60, 10).toString().padStart(2, '0');\n\tlet seconds = parseInt(remainingTime % 60, 10).toString().padStart(2, '0');\n\n\ttimeIndicator.firstElementChild.innerText = minutes;\n\ttimeIndicator.lastElementChild.innerText = seconds;\n}\n\nlet intervalId;\nlet timeoutId;\n\n/**\n * @function\n * @name updateTimer\n * @description The method to use every second to refresh the timer's UI.\n *\n * @author Tam\n */\nconst updateTimer = () => {\n\tupdateProgressRing(remainingTime / userPreferences.defaultTimerTime[userPreferences.selectedTimerType] * 100);\n\tupdateTimeIndicator(remainingTime);\n\tremainingTime--;\n}\n\n/**\n * @function\n * @name startTimer\n * @description Starts the timer.\n *\n * @author Tam\n */\nconst startTimer = () => {\n\tisTimerActive = true;\n\tbuttonLabel.innerText = \"Pause\";\n\tupdateTimer();\n\n\tintervalId = setInterval(() => {\n\t\tupdateTimer();\n\t}, 1000);\n\n\ttimeoutId = setTimeout(() => {\n\tresetTimer();\n\tnotifyTimerEnded();\n\t}, userPreferences.defaultTimerTime[userPreferences.selectedTimerType] * 1000);\n}\n\n/**\n * @function\n * @name pauseTimer\n * @description Pauses the timer.\n *\n * @author Tam\n */\nconst pauseTimer = () => {\n\tisTimerActive = false;\n\tbuttonLabel.innerText = \"Resume\";\n\tclearInterval(intervalId);\n\tclearTimeout(timeoutId);\n}\n\n/**\n * @function\n * @name resetTimer\n * @description Resets the remaining time and restarts the timer.\n * \n * @author Tam\n */\nconst resetTimer = () => {\n\tbuttonLabel.innerText = \"Start\";\n\tclearInterval(intervalId);\n\tclearTimeout(timeoutId);\n\tremainingTime = userPreferences.defaultTimerTime[userPreferences.selectedTimerType];\n\tupdateProgressRing(100);\n\tupdateTimeIndicator(remainingTime);\n}\n\n/**\n * @function\n * @name restartTimer\n * @description Restarts the timer after resetting it.\n * \n * @author Tam\n */\n const restartTimer = () => {\n\tresetTimer();\n\tstartTimer();\n}\n\n/**\n * @function\n * @name onTimerButtonClick\n * @description Handles the click event on the timer button.\n *\n * @author Tam\n */\nconst onTimerButtonClick = () => {\n\tif (!isTimerActive && remainingTime > 0) {\n\t\tstartTimer();\n\t} else if (!isTimerActive && remainingTime === 0) {\n\t\trestartTimer();\n\t} else {\n\t\tpauseTimer();\n\t}\n}\n\n/**\n * @function\n * @name processFormData\n * @description Extracts data from the provided form.\n *\n * @author Tam\n *\n * @param {HTMLElement} form The form to extract data from.\n *\n * @returns {object}\n */\nconst processFormData = (form) => {\n\tconst font = [...form.querySelectorAll('input[type=\"radio\"][name=\"font\"]')]\n\t\t.find((input) => input.checked)\n\t\t.value;\n\n\tconst accentColor = [...form.querySelectorAll('input[type=\"radio\"][name=\"accent-color\"]')]\n\t\t.find((input) => input.checked)\n\t\t.value;\n\n\tconst formData = {\n\t\tpomodoro: form.querySelector('#pomodoro-time-input').value,\n\t\tshortBreak: form.querySelector('#pomodoro-short-break-input').value,\n\t\tlongBreak: form.querySelector('#pomodoro-long-break-input').value,\n\t\tfont,\n\t\taccentColor: `--clr-${accentColor}`,\n\t};\n\n\treturn formData;\n}\n\n/**\n * @function\n * @name initializeSettingsForm\n * @description Initialises the settings form.\n *\n * @author Tam\n */\nconst initializeSettingsForm = () => {\n\tconst { pomodoro, shortBreak, longBreak } = userPreferences.defaultTimerTime;\n\n\tdocument.getElementById('pomodoro-time-input').value = pomodoro / 60;\n\tdocument.getElementById('pomodoro-short-break-input').value = shortBreak / 60;\n\tdocument.getElementById('pomodoro-long-break-input').value = longBreak / 60;\n}\n\n/**\n * @function\n * @name onSettingsFormSubmit\n * @description Handles the submit event on the settings form.\n *\n * @param {*} event\n */\nconst onSettingsFormSubmit = (event) => {\n\tconst { pomodoro, shortBreak, longBreak, font, accentColor } = processFormData(event.target);\n\n\tuserPreferences.defaultTimerTime = {\n\t\tpomodoro: pomodoro * 60,\n\t\tshortBreak: shortBreak * 60,\n\t\tlongBreak: longBreak * 60,\n\t};\t\n\tuserPreferences.font = font;\n\tuserPreferences.accentColor = accentColor;\n\n\tsaveUserPreferences(userPreferences);\n\n\tdocument.querySelector(':root').style.setProperty('--font', userPreferences.font);\n\tdocument.querySelector(':root').style.setProperty('--clr-accent', `var(${userPreferences.accentColor})`);\n\n\tresetTimer();\n};\n\n/**\n * @function\n * @name onTimerTypeInputChange\n * @description Handles the change event on the timer type input.\n *\n * @author Tam\n *\n * @param {string} value The selected timer type.\n */\nconst onTimerTypeChange = ({ target: { value } }) => {\n\tif (!timerTypeValues.has(value)) {\n\t\treturn;\n\t}\n\n\tuserPreferences.selectedTimerType = timerTypeValues.get(value);\n\tsaveUserPreferences(userPreferences);\n\tresetTimer();\n};\n\n/**\n * @function\n * @name startup\n * @description Initialises the application.\n *\n * @author Tam\n */\nconst startup = () => {\n\tbutton.addEventListener('click', function() {\n\t\tonTimerButtonClick();\n\t});\n\t\n\ttimerTypeInputs.forEach((input) => input.addEventListener('change', function(e) {\n\t\tonTimerTypeChange(e);\n\t}));\n\t\n\tsettingsButton.addEventListener('click', function() {\n\t\tsettingsDialog.showModal();\n\t});\n\t\n\tcloseDialogButton.addEventListener('click', function() {\n\t\tsettingsDialog.close();\n\t});\n\t\n\tsettingsForm.addEventListener('submit', function(e) {\n\t\tonSettingsFormSubmit(e);\n\t});\n\t\n\tinitialiseProgressRing();\n\tupdateTimeIndicator(remainingTime);\n\tinitializeSettingsForm();\n\trequestNotificationPermission();\n}\n\nstartup();\n"],"names":["$302e4b401cc9d62c$export$133e366e1559cdc6","Notification","permission","notification","body","document","addEventListener","visibilityState","close","$f1b6e5e22996a273$var$defaultUserPreferences","defaultTimerTime","pomodoro","shortBreak","longBreak","selectedTimerType","font","accentColor","$f1b6e5e22996a273$export$c39a46c00a3f037b","userPreferences","window","localStorage","setItem","JSON","stringify","$e73bf42412feb220$var$button","querySelector","$e73bf42412feb220$var$buttonLabel","$e73bf42412feb220$var$progressRing","getElementById","$e73bf42412feb220$var$progressRingWrapper","$e73bf42412feb220$var$timeIndicator","$e73bf42412feb220$var$timerTypeInputs","querySelectorAll","$e73bf42412feb220$var$settingsButton","$e73bf42412feb220$var$settingsDialog","$e73bf42412feb220$var$settingsForm","$e73bf42412feb220$var$closeDialogButton","$e73bf42412feb220$var$timerTypeValues","Map","$e73bf42412feb220$var$userPreferences","getItem","parse","$e73bf42412feb220$var$isTimerActive","find","element","get","value","checked","$e73bf42412feb220$var$remainingTime","$e73bf42412feb220$var$progressRingCircumference","$e73bf42412feb220$var$initialiseProgressRing","r","baseVal","getBoundingClientRect","width","progressRingRadius","Math","PI","style","strokeDasharray","strokeDashoffset","$e73bf42412feb220$var$updateProgressRing","percent","offset","$e73bf42412feb220$var$updateTimeIndicator","remainingTime","minutes","parseInt","toString","padStart","seconds","firstElementChild","innerText","lastElementChild","$e73bf42412feb220$var$intervalId","$e73bf42412feb220$var$timeoutId","$e73bf42412feb220$var$updateTimer","$e73bf42412feb220$var$startTimer","setInterval","setTimeout","$e73bf42412feb220$var$resetTimer","clearInterval","clearTimeout","$e73bf42412feb220$var$onTimerButtonClick","forEach","input","e","target","has","$e73bf42412feb220$var$onTimerTypeChange","showModal","event","form","$e73bf42412feb220$var$processFormData","setProperty","$e73bf42412feb220$var$onSettingsFormSubmit","$e73bf42412feb220$var$initializeSettingsForm","requestPermission","then","result","console","log"],"version":3,"file":"index.e4d99d85.js.map"}